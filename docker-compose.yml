version: "3"

services:

  corebuild:
    image: corebuild
    build:
      context: ./
      dockerfile: Dockerfile.composebase

  redis:
    image: redis:alpine
    ports:
      - "6379"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  postgres:
    image: postgres
    ports:
      - "5432:5432"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  ingest:
    build:
      context: ./
      dockerfile: Dockerfile.ingest
    image: "openrelay/ingest:latest"
    ports:
      - "8081:8081"
    command: ["/ingest", "postgres://ingest@postgres", "${POSTGRES_PASSWORD_INGEST}", "redis:6379", "${FEE_RECIPIENT_ADDRESS}", "queue://ingest"]
    depends_on:
      - redis
      - corebuild
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  exchangesplitter:
    build:
      context: ./
      dockerfile: Dockerfile.exchangesplitter
    image: "openrelay/exchangesplitter:latest"
    command: ["/exchangesplitter", "redis:6379", "queue://ingest", "testrpc"]
    depends_on:
      - redis
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  fillupdate:
    build:
      context: ./
      dockerfile: Dockerfile.fillupdate
    image: "openrelay/fillupdate:latest"
    command: ["/fillupdate", "redis:6379", "${ETHEREUM_URL}", "topic://ordersfilled", "file:///bloom/data/testdata", "queue://fillupdate=>queue://fundcheck"]
    volumes:
      - bloomdata:/bloom/data
    depends_on:
      - redis
      - corebuild
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  fundcheckrelay:
    build:
      context: ./
      dockerfile: Dockerfile.fundcheckrelay
    image: "openrelay/fundcheckrelay:latest"
    command: ["/fundcheckrelay", "redis:6379", "${ETHEREUM_URL}", "queue://fundcheck=>queue://poolfilter", "--invalidation=topic://newblocks"]
    depends_on:
      - redis
      - corebuild
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    restart: on-failure

  fillmonitor:
    build:
      context: ./
      dockerfile: Dockerfile.fillmonitorng
    image: "openrelay/fillmonitorng:latest"
    command: ["/fillmonitor", "redis:6379", "${ETHEREUM_URL}", "queue://fillblocks", "queue://ordersfilled", "file:///bloom/data/testdata", "${EXCHANGE_ADDRESS}"]
    volumes:
      - bloomdata:/bloom/data
    depends_on:
      - redis
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  multisigmonitor:
    build:
      context: ./
      dockerfile: Dockerfile.multisigmonitor
    image: "openrelay/multisigmonitor:latest"
    command: ["/multisigmonitor", "redis:6379", "${ETHEREUM_URL}", "queue://multisigblocks", "${EXCHANGE_ADDRESS}"]
    depends_on:
      - redis
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  affiliatemonitor:
    build:
      context: ./
      dockerfile: Dockerfile.affiliatemonitor
    image: "openrelay/affiliatemonitor:latest"
    command: ["/affiliatemonitor", "redis:6379", "${ETHEREUM_URL}", "queue://affiliateblocks", "${EXCHANGE_ADDRESS}"]
    depends_on:
      - redis
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  pgfillindexer:
    build:
      context: ./
      dockerfile: Dockerfile.pgfillindexer
    image: "openrelay/pgfillindexer:latest"
    command: ["/fillindexer", "redis:6379", "queue://pgordersfilled", "postgres://indexer@postgres", "${POSTGRES_PASSWORD_INDEXER}"]
    depends_on:
      - redis
      - postgres
      - corebuild
    restart: on-failure
  
  initialize:
    build:
      context: ./
      dockerfile: Dockerfile.initialize
    image: "openrelay/initialize:latest"
    command: ["/initialize", "redis:6379", "${FEE_AMOUNT_ZRX}", "${FEE_RECIPIENT_ADDRESS}"]
    depends_on:
      - redis
      - corebuild

  entrypoint:
    build:
      context: ./
      dockerfile: Dockerfile.testinit
    volumes:
      - "./js:/project"
    command: ["node", "/project/hang.js"]

  pgindexer:
    build:
      context: ./
      dockerfile: Dockerfile.pgindexer
    image: "openrelay/pgindexer:latest"
    command: ["/indexer", "redis:6379", "queue://pgindexer", "postgres://indexer@postgres", "${POSTGRES_PASSWORD_INDEXER}"]
    depends_on:
      - postgres
      - redis
      - corebuild
    restart: on-failure

  pgautomigrate:
    build:
      context: ./
      dockerfile: Dockerfile.automigrate
    image: "openrelay/automigrate:latest"
    # TODO: PROD config needs to reflect new roles
    command:
      - "/automigrate"
      - "postgres://postgres@postgres"
      - "${POSTGRES_PASSWORD}"
      - "indexer;${POSTGRES_PASSWORD_INDEXER};orderv2.SELECT,orderv2.INSERT,orderv2.UPDATE"
      - "spendrecorder;${POSTGRES_PASSWORD_SPEND_RECORDER};orderv2.SELECT,orderv2.INSERT,orderv2.UPDATE"
      - "search;${POSTGRES_PASSWORD_SEARCH};orderv2.SELECT,exchanges.SELECT,pools.SELECT"
      - "cancelfilter;${POSTGRES_PASSWORD_CANCEL_FILTER};cancellations.SELECT"
      - "poolfilter;${POSTGRES_PASSWORD_POOL_FILTER};pools.SELECT,exchanges.SELECT"
      - "cancelindexer;${POSTGRES_PASSWORD_CANCEL_INDEXER};cancellations.SELECT,cancellations.INSERT,cancellations.UPDATE,orderv2.SELECT,orderv2.INSERT,orderv2.UPDATE"
      - "tos;${POSTGRES_PASSWORD_TOS};terms.SELECT,terms_sigs.SELECT,terms_sigs.INSERT,hash_masks.SELECT,hash_masks.INSERT"
      - "ingest;${POSTGRES_PASSWORD_INGEST};terms.SELECT,terms_sigs.SELECT,terms_sigs.INSERT,pools.SELECT,exchanges.SELECT"
      - "tosmgr;${POSTGRES_PASSWORD_TOS_MGR};terms.SELECT,terms.INSERT,terms.UPDATE,terms_sigs.SELECT,terms_sigs.INSERT,terms_sigs.UPDATE,hash_masks.SELECT,hash_masks.INSERT,hash_masks.DELETE"
    depends_on:
      - postgres
      - corebuild
    restart: on-failure

  pgapi:
    build:
      context: ./
      dockerfile: Dockerfile.pgsearchapi
    image: "openrelay/pgsearchapi:latest"
    ports:
      - "8082:8082"
    command: ["/searchapi", "redis:6379", "topic://newblocks", "postgres://search@postgres", "${POSTGRES_PASSWORD_SEARCH}"]
    depends_on:
      - redis
      - corebuild
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    restart: on-failure

  termsapi:
    build:
      context: ./
      dockerfile: Dockerfile.termsapi
    image: "openrelay/termsapi:latest"
    ports:
      - "8083:8083"
    command: ["/terms", "postgres://tos@postgres", "${POSTGRES_PASSWORD_TOS}"]
    depends_on:
      - redis
      - corebuild
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    restart: on-failure

  simplerelay:
    build:
      context: ./
      dockerfile: Dockerfile.simplerelay
    image: "openrelay/simplerelay:latest"
    command: ["/simplerelay", "redis:6379", "queue://ordersfilled=>queue://pgordersfilled=>topic://ordersfilled", "queue://newblocks=>queue://allowanceblocks=>queue://erc721approvalblocks=>queue://spendblocks=>topic://newblocks=>queue://fillblocks=>queue://canceluptoblocks=>queue://affiliateblocks"]
    depends_on:
      - redis
      - corebuild
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  blockmonitorng:
    build:
      context: ./
      dockerfile: Dockerfile.blockmonitorng
    image: "openrelay/blockmonitorng:latest"
    command: ["/blockmonitor", "redis:6379", "${ETHEREUM_URL}", "queue://newblocks"]
    depends_on:
      - redis
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  allowancemonitor:
    build:
      context: ./
      dockerfile: Dockerfile.allowancemonitor
    image: "openrelay/allowancemonitor:latest"
    command: ["/allowancemonitor", "redis:6379", "${ETHEREUM_URL}", "queue://allowanceblocks", "queue://recordspend", "${EXCHANGE_ADDRESS}"]
    depends_on:
      - redis
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  erc721approvalmonitor:
    build:
      context: ./
      dockerfile: Dockerfile.erc721approvalmonitor
    image: "openrelay/erc721approvalmonitor:latest"
    command: ["/erc721approvalmonitor", "redis:6379", "${ETHEREUM_URL}", "queue://erc721approvalblocks", "queue://recordspend", "${EXCHANGE_ADDRESS}"]
    depends_on:
      - redis
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  spendmonitor:
    build:
      context: ./
      dockerfile: Dockerfile.spendmonitor
    image: "openrelay/spendmonitor:latest"
    command: ["/spendmonitor", "redis:6379", "${ETHEREUM_URL}", "queue://spendblocks", "queue://recordspend", "${EXCHANGE_ADDRESS}"]
    depends_on:
      - redis
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  spendrecorder:
    build:
      context: ./
      dockerfile: Dockerfile.spendrecorder
    image: "openrelay/spendrecorder:latest"
    command: ["/spendrecorder", "redis:6379", "queue://recordspend", "postgres://spendrecorder@postgres", "${POSTGRES_PASSWORD_SPEND_RECORDER}"]
    depends_on:
      - redis
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  canceluptomonitor:
    build:
      context: ./
      dockerfile: Dockerfile.canceluptomonitor
    image: "openrelay/canceluptomonitor:latest"
    command: ["/canceluptomonitor", "redis:6379", "${ETHEREUM_URL}", "queue://canceluptoblocks", "queue://recordcancel", "${EXCHANGE_ADDRESS}"]
    depends_on:
      - redis
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  canceluptofilter:
    build:
      context: ./
      dockerfile: Dockerfile.canceluptofilter
    image: "openrelay/canceluptofilter:latest"
    command: ["/canceluptofilter", "redis:6379", "postgres://cancelfilter@postgres", "${POSTGRES_PASSWORD_CANCEL_FILTER}", "queue://${EXCHANGE_ADDRESS}-testrpc=>queue://fillupdate"]
    depends_on:
      - redis
      - postgres
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  canceluptoindexer:
    build:
      context: ./
      dockerfile: Dockerfile.canceluptoindexer
    image: "openrelay/canceluptoindexer:latest"
    command: ["/canceluptoindexer", "redis:6379", "queue://recordcancel", "postgres://cancelindexer@postgres", "${POSTGRES_PASSWORD_CANCEL_INDEXER}"]
    restart: on-failure

  poolfilter:
    build:
      context: ./
      dockerfile: Dockerfile.poolfilter
    image: "openrelay/poolfilter:latest"
    command: ["/poolfilter", "postgres://poolfilter@postgres", "${POSTGRES_PASSWORD_POOL_FILTER}", "redis:6379", "${ETHEREUM_URL}", "queue://poolfilter=>queue://pgindexer=>topic://instant-broadcast"]
    depends_on:
      - redis
      - postgres
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  queuemonitor:
    build:
      context: ./
      dockerfile: Dockerfile.queuemonitor
    image: "openrelay/queuemonitor:latest"
    command: ["/queuemonitor", "redis:6379", "1", "newblocks-ropsten", "ordersfilled", "pgordersfilled", "newblocks", "released-ropsten", "fundcheck-ropsten", "allowanceblocks", "recheck-ropsten", "fillupdate-ropsten", "indexer", "preindexer", "spendblocks-ropsten", "recordspend", "ordersfilled-ropsten", "delay2-ropsten", "released", "fundcheck", "allowanceblocks-ropsten", "recheck2-ropsten", "fillupdate", "fillblocks-ropsten", "spendblocks", "recheck2", "delay1", "delay2", "ingest", "fillblocks", "pgindexer", "delay1-ropsten", "multisigblocks", "recheck", "canceluptoblocks", "recordcancel", "${EXCHANGE_ADDRESS}-testrpc"]
    depends_on:
      - redis
      - corebuild
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  # contractinit:
  #   build:
  #     context: ./
  #     dockerfile: Dockerfile.testinit
  #   command: ["/project/setup.sh", "redis://redis:6379"]
  #   environment:
  #     - ETHEREUM_URL=${ETHEREUM_URL}
  #   depends_on:
  #     - redis
  #     - corebuild

  # simplerelaynewblocks:
  #   build:
  #     context: ./
  #     dockerfile: Dockerfile.simplerelay
  #   image: "openrelay/simplerelay:latest"
  #   command: ["/simplerelay", "redis:6379", "queue://newblocks", "queue://allowanceblocks", "queue://spendblocks", "topic://newblocks", "queue://fillblocks"]
  #   depends_on:
  #     - redis
  #   deploy:
  #     replicas: 1
  #     restart_policy:
  #       condition: on-failure

  # simplerelayreleased:
  #   build:
  #     context: ./
  #     dockerfile: Dockerfile.simplerelay
  #   image: "openrelay/simplerelay:latest"
  #   command: ["/simplerelay", "redis:6379", "queue://released", "queue://recheck", "topic://released-broadcast"]
  #   depends_on:
  #     - redis
  #   deploy:
  #     replicas: 1
  #     restart_policy:
  #       condition: on-failure

  # fillupdate2:
  #   build:
  #     context: ./
  #     dockerfile: Dockerfile.fillupdate
  #   image: "openrelay/fillupdate:latest"
  #   command: ["/fillupdate", "redis:6379", "${ETHEREUM_URL}", "queue://recheck", "topic://ordersfilled", "file:///bloom/data/testdata", "queue://recheck2"]
  #   volumes:
  #     - bloomdata:/bloom/data
  #   depends_on:
  #     - redis
  #   deploy:
  #     replicas: 1
  #     restart_policy:
  #       condition: on-failure

  # fundcheckrelay2:
  #   build:
  #     context: ./
  #     dockerfile: Dockerfile.fundcheckrelay
  #   image: "openrelay/fundcheckrelay:latest"
  #   command: ["/fundcheckrelay", "redis:6379", "${ETHEREUM_URL}", "queue://recheck2", "queue://pgindexer", "--invalidation=topic://newblocks"]
  #   depends_on:
  #   restart: on-failure

volumes:
  bloomdata:
